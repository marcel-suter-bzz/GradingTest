name: GitHub Classroom Workflow

on: [push]

env:
  DEVOPS_DIR: devops
  GHSECRET: ${{ secrets.GITHUB_TOKEN }}
  TARGET_REPO: ${{ github.repository }}
  SOURCE_REPO: BZZ-Commons/copy-issues
  SCRIPT_REPO: BZZ-Commons/copy-issues
  ADD_LABELS: "true"
  DATA_REPO: BZZ-Commons/set-testdata
  DATA_PATH: 'FIXME url'

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  grading:
    if: ${{ !contains(github.actor, 'classroom') }}
    name: Autograding
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: education/autograding@v1
        id: autograding
      - name: export-grade
        if: always()
        run: |
          curl -X POST "https://it.bzz.ch/fgitapi/gh_grade/${{ github.repository }}/${{ steps.autograding.outputs.Points }}"
  copy-issues:
    if: ${{ contains(github.actor, 'classroom') }}
    name: CopyIssues
    runs-on: ubuntu-latest
    steps:
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyGithub
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Check-out the IssueCopy Repo
      uses: actions/checkout@v2
      with:
        repository: ${{ env.SCRIPT_REPO }}
        path: ${{ env.DEVOPS_DIR }}
    - name: Copy the Issues
      run: python ${{ env.DEVOPS_DIR }}/issues.py
      shell: sh
  copy-testdata:
    permissions: write-all
    name: Setup test data
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyGithub
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Check-out the TestData Repo
        uses: actions/checkout@v3
        with:
          repository: ${{ env.DATA_REPO }}
          path: ${{ env.DEVOPS_DIR }}
      - name: Copy the test data
        run: python ${{ env.DEVOPS_DIR }}/main.py
        shell: sh
